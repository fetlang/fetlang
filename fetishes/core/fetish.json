{
	"name": "core",
	"description": "This is the core fetish. It effectively defines the language. You do not need to manually include it.",
	"dependencies": {
		"libraries": [],
		"fetishes": []
	},

	"operators": [
	{
        "name": "spank",
        "description": "Subtract the RHO from the LHO",
        "grammars": ["have", "plain"],
        "examples": ["Spank Linus nine times", "Have Richard spank Linus"],
        "code":
		{
            "fraction/fraction": "LHO=subtract_fractions(LHO, RHO)"
        }
    },
	{
        "name": "worship",
        "description": "Multiply the LHO with the RHO",
        "grammars": ["have", "plain"],
        "examples": ["Worship Mary's feet", "Have Mary worship Gary's throbbing cock"],
        "code":
		{
            "fraction/fraction": "LHO=multiply_fractions(LHO, RHO)"
        }
    },
	{
        "name": "flog",
        "description": "Divide the LHO by the RHO",
        "grammars": ["have", "plain"],
        "examples": ["Flog Mary", "Have Mary flog Gary"],
        "code":
		{
            "fraction/fraction": "LHO=divide_fractions(LHO, RHO)"
        }
    },
	{
        "name": "lick",
        "description": "Add the RHO from the LHO",
        "grammars": ["have", "plain"],
        "examples": ["Lick Linus's face nine times", "Have Richard lick Linus's tummy"],
        "code":
		{
            "fraction/fraction": "LHO=add_fractions(LHO, RHO)"
		}
	},
	{
        "name": "tickle",
        "description": "Set the LHO to the remainder of the LHO divided by the RHO",
        "grammars": ["have", "plain"],
        "examples": ["tickle Richard", "Have Richard tickle Linus"],
        "code":
		{
            "fraction/fraction": "LHO=modulus_fractions(LHO, RHO)"
		}
	},
	{
        "name": "moan",
        "description": "Assign RHO to LHO",
        "grammars": ["make"],
        "code":
		{
            "fraction/fraction": "LHO=RHO",
            "fraction/chain": "LHO=chain_to_fraction(RHO)",
            "chain/fraction": "clear_chain(&LHO);append_fraction_to_chain(&LHO, RHO)",
            "chain/chain": "clear_chain(&LHO); append_chain_to_chain(&LHO, RHO)"
        }
	},
	{
        "name": "scream",
        "description": "Assign RHO to LHO, with new line",
        "grammars": ["make"],
        "code":
		{
            "chain/fraction": "clear_chain(&LHO);append_fraction_to_chain(&LHO, RHO);append_flink_to_chain(&LHO, construct_fraction(10,1));",
            "chain/chain": "clear_chain(&LHO);append_chain_to_chain(&LHO, RHO);append_flink_to_chain(&LHO, construct_fraction(10,1));"
        }
	},
	{
		"name": "torture",
		"description": "Read the next byte from RHO and place it into LHO",
		"examples": ["Have Mistress torture his cock"],
		"grammars": ["have"],
		"code":
		{
			"fraction/stream": "LHO = get_next_byte_of_stream(RHO)"
		}
	},
	{
        "name": "tie up",
        "description": "Concat RHO to LHO",
        "grammars": ["have"],
        "code":
		{
            "chain/fraction": "append_fraction_to_chain(&LHO, RHO)",
            "chain/chain": "append_chain_to_chain(&LHO, RHO)"
        }
	},
	{
        "name": "hogtie",
        "description": "Concat RHO as fraction to LHO",
        "grammars": ["have"],
        "code":
		{
            "chain/fraction": "append_flink_to_chain(&LHO, RHO)"
        }
	},
	{
		"name": "to",
		"grammars": ["bind"],
		"code":
		{
			"reference/chain": "--this should never enter the C code--"
		}
	}

    ],

    "comparison_operators": [
	{
        "name": "is",
        "description": "Return true if LHO==RHO, else return false",
        "code": {
            "fraction/fraction": "(compare_fractions(LHO, RHO)==0)",
			"chain/chain": "(compare_chains(LHO, RHO)==0)"
		}
    },
	{
        "name": "is not",
        "description": "Return true if LHO!=RHO, else return false",
        "code": {
            "fraction/fraction": "(compare_fractions(LHO, RHO)!=0)",
			"chain/chain": "(compare_chains(LHO, RHO)!=0)"
		}
    },

	{
        "name": "is submissive to",
        "description": "Return true if LHO<RHO, else return false",
        "code": {
            "fraction/fraction": "(compare_fractions(LHO, RHO)==-1)"
		}
    },
	{
        "name": "is dominant towards",
        "description": "Return true if LHO>RHO, else return false",
        "code": {
            "fraction/fraction": "(compare_fractions(LHO, RHO)==1)"
		}
    }
    ],

	"builtins":[{
		"name": "slave",
		"description": "Standard output",
		"gender": "unassigned",
		"type": "stream",
		"code": "stdout"
	},
	{
		"name": "mistress",
		"description": "Standard input",
		"gender": "female",
		"type": "stream",
		"code": "stdin"
	},
	{
		"name": "dungeon master",
		"description": "Standard error",
		"gender": "unassigned",
		"type": "stream",
		"code": "stderr"
	},
	{
		"name": "saint andrew",
		"description": "Chain version of argv with arguments separated by `zero`, intended to be invoked as `Saint Andrew's Cross`",
		"gender": "nonperson",
		"type": "chain",
		"code": "argv_chain"
	}

	],

	"preloop_code": "Fraction argc_fraction = construct_fraction(argc, 1);\nChain argv_chain;\ninit_chain(&argv_chain);for(int i=0;i<argc;i++){append_cstr_to_chain(&argv_chain, argv[i]); append_flink_to_chain(&argv_chain, construct_fraction(0,1));}\n",
	"postloop_code": "clear_chain(&argv_chain);"

}
